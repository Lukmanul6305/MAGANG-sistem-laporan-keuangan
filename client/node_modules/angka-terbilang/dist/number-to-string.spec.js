"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const number_to_string_1 = require("./number-to-string");
const chai = require("chai");
const expect = chai.expect;
describe('Terbilang Library', () => {
    it('should be able to convert number < 12', () => {
        expect(number_to_string_1.default(0)).to.equal('nol');
        expect(number_to_string_1.default(1)).to.equal('satu');
        expect(number_to_string_1.default(2)).to.equal('dua');
        expect(number_to_string_1.default(3)).to.equal('tiga');
        expect(number_to_string_1.default(4)).to.equal('empat');
        expect(number_to_string_1.default(5)).to.equal('lima');
        expect(number_to_string_1.default(6)).to.equal('enam');
        expect(number_to_string_1.default(7)).to.equal('tujuh');
        expect(number_to_string_1.default(8)).to.equal('delapan');
        expect(number_to_string_1.default(9)).to.equal('sembilan');
        expect(number_to_string_1.default(10)).to.equal('sepuluh');
        expect(number_to_string_1.default(11)).to.equal('sebelas');
    });
    it('should be able to convert number >= 12 and < 20', () => {
        expect(number_to_string_1.default(12)).to.equal('dua belas');
        expect(number_to_string_1.default(16)).to.equal('enam belas');
        expect(number_to_string_1.default(19)).to.equal('sembilan belas');
    });
    it('should be able to convert number >= 20 and < 100', () => {
        expect(number_to_string_1.default(20)).to.equal('dua puluh');
        expect(number_to_string_1.default(21)).to.equal('dua puluh satu');
        expect(number_to_string_1.default(45)).to.equal('empat puluh lima');
        expect(number_to_string_1.default(99)).to.equal('sembilan puluh sembilan');
    });
    it('should be able to convert number >= 100 and < 200', () => {
        expect(number_to_string_1.default(100)).to.equal('seratus');
        expect(number_to_string_1.default(101)).to.equal('seratus satu');
        expect(number_to_string_1.default(153)).to.equal('seratus lima puluh tiga');
        expect(number_to_string_1.default(199)).to.equal('seratus sembilan puluh sembilan');
    });
    it('should be able to convert number >= 200 and < 1000', () => {
        expect(number_to_string_1.default(200)).to.equal('dua ratus');
        expect(number_to_string_1.default(201)).to.equal('dua ratus satu');
        expect(number_to_string_1.default(212)).to.equal('dua ratus dua belas');
        expect(number_to_string_1.default(530)).to.equal('lima ratus tiga puluh');
        expect(number_to_string_1.default(999)).to.equal('sembilan ratus sembilan puluh sembilan');
    });
    it('should be able to convert number >= 1000 and < 2000', () => {
        expect(number_to_string_1.default(1000)).to.equal('seribu');
        expect(number_to_string_1.default(1001)).to.equal('seribu satu');
        expect(number_to_string_1.default(1102)).to.equal('seribu seratus dua');
        expect(number_to_string_1.default(1536)).to.equal('seribu lima ratus tiga puluh enam');
        expect(number_to_string_1.default(1999)).to.equal('seribu sembilan ratus sembilan puluh sembilan');
    });
    it('should be able to convert number >= 2000 and < 10000', () => {
        expect(number_to_string_1.default(2000)).to.equal('dua ribu');
        expect(number_to_string_1.default(2001)).to.equal('dua ribu satu');
        expect(number_to_string_1.default(5379)).to.equal('lima ribu tiga ratus tujuh puluh sembilan');
        expect(number_to_string_1.default(9999)).to.equal('sembilan ribu sembilan ratus sembilan puluh sembilan');
    });
    it('should be able to convert number >= 10000 and < 1000000', () => {
        expect(number_to_string_1.default(10000)).to.equal('sepuluh ribu');
        expect(number_to_string_1.default(20001)).to.equal('dua puluh ribu satu');
        expect(number_to_string_1.default(500379)).to.equal('lima ratus ribu tiga ratus tujuh puluh sembilan');
        expect(number_to_string_1.default(999999)).to.equal('sembilan ratus sembilan puluh sembilan ribu sembilan ratus sembilan puluh sembilan');
    });
    it('should be able to convert number >= 1000000 and < 1000000000', () => {
        expect(number_to_string_1.default(1000000)).to.equal('satu juta');
        expect(number_to_string_1.default(1000100)).to.equal('satu juta seratus');
        expect(number_to_string_1.default(12323344)).to.equal('dua belas juta tiga ratus dua puluh tiga ribu tiga ratus empat puluh empat');
        expect(number_to_string_1.default(321312333)).to.equal('tiga ratus dua puluh satu juta tiga ratus dua belas ribu tiga ratus tiga puluh tiga');
        expect(number_to_string_1.default(999999999)).to.equal('sembilan ratus sembilan puluh sembilan juta sembilan ratus sembilan puluh sembilan ribu sembilan ratus sembilan puluh sembilan');
    });
    it('should be able to convert number >= 1000000000 and < 1000000000000', () => {
        expect(number_to_string_1.default(1000000000)).to.equal('satu milyar');
        expect(number_to_string_1.default(1001000000)).to.equal('satu milyar satu juta');
        expect(number_to_string_1.default(587363123376)).to.equal('lima ratus delapan puluh tujuh milyar tiga ratus enam puluh tiga juta seratus dua puluh tiga ribu tiga ratus tujuh puluh enam');
        expect(number_to_string_1.default(789632362376)).to.equal('tujuh ratus delapan puluh sembilan milyar enam ratus tiga puluh dua juta tiga ratus enam puluh dua ribu tiga ratus tujuh puluh enam');
        expect(number_to_string_1.default(999999999999)).to.equal('sembilan ratus sembilan puluh sembilan milyar sembilan ratus sembilan puluh sembilan juta sembilan ratus sembilan puluh sembilan ribu sembilan ratus sembilan puluh sembilan');
    });
    it('should return empty string if number given is > 1000000000000', () => {
        expect(number_to_string_1.default(1000000000000)).to.equal('');
        expect(number_to_string_1.default(1231231232133)).to.equal('');
    });
    it('should be able to convert number with type string', () => {
        expect(number_to_string_1.default('1000000000')).to.equal('satu milyar');
        expect(number_to_string_1.default('1001000000')).to.equal('satu milyar satu juta');
        expect(number_to_string_1.default('587363123376')).to.equal('lima ratus delapan puluh tujuh milyar tiga ratus enam puluh tiga juta seratus dua puluh tiga ribu tiga ratus tujuh puluh enam');
        expect(number_to_string_1.default('789632362376')).to.equal('tujuh ratus delapan puluh sembilan milyar enam ratus tiga puluh dua juta tiga ratus enam puluh dua ribu tiga ratus tujuh puluh enam');
        expect(number_to_string_1.default('999999999999')).to.equal('sembilan ratus sembilan puluh sembilan milyar sembilan ratus sembilan puluh sembilan juta sembilan ratus sembilan puluh sembilan ribu sembilan ratus sembilan puluh sembilan');
    });
    it('should throw error if given value neither string nor number', () => {
        const notNumber = new Date();
        expect(() => number_to_string_1.default(notNumber)).to.throw('value must be either string or number');
    });
});
